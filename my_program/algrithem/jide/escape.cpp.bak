#include <stdio.h>
#include <stdlib.h>
#include "escape.h"

/*


wh(0, 0)(w, h)

((w/2, 0))((w/2, h))



boolean escape(int w, int h, int n, double[] x, double[] y, double[] r)

whni(x[i],y[i])r[i]

true or false
*/
using namespace std;

const float EPSINON = 0.00000001;

// Initialize the static counter
int refcount::count = 0;

bool Coordinate::operator == (Coordinate& pos) {
	double deltaX = pos.getX() - posX;
	double deltaY = pos.getY() - posY;
	if(!(deltaX>-EPSINON && deltaX< EPSINON)) {
		return false;
	} else if (!(deltaY>-EPSINON && deltaY< EPSINON)) {
		return false;
	}
	
	return true;
}

bool Coordinate::operator != (Coordinate& pos) {
	if(*this == pos) {
		return false;
	}		
	return true;
}

bool Detector::isOverlap(Detector& dector) {
	double deltaX = (center->getX() > dector.getCenter().getX())?
	                (center->getX()-dector.getCenter().getX()):(dector.getCenter().getX()-center->getX());
	double deltaY = (center->getY() > dector.getCenter().getY())?
	                (center->getY()-dector.getCenter().getY()):(dector.getCenter().getY()-center->getY());
	double sumRadius = radius + dector.getR();
	
	// ToDo: need to check over flow
	double deltaCenter = deltaX*deltaX - sumRadius*sumRadius + deltaY*deltaY;
	if(deltaCenter>-EPSINON && deltaCenter< EPSINON) {
		return false;
	} else {
		return true;
	}
}

bool Detector::operator == (Detector& detector) {
	double deltaR = detector.getR() - radius;
	if(!(deltaR>-EPSINON && deltaR< EPSINON)) {
		return false;
	} else if (detector.getCenter() != *center) {
		return false;
	}
	
	return true;
}

bool Detector::operator != (Detector& detector) {
	if(*this == detector) {
		return false;
	}		
	return true;
}

bool Detector::isCoordinateInside(Coordinate& pos) {
	double deltaX = (center->getX() > pos.getX())?
	                (center->getX()-pos.getX()):(pos.getX()-center->getX());
	double deltaY = (center->getY() > pos.getY())?
	                (center->getY()-pos.getY()):(pos.getY()-center->getY());

	double deltaCenter = deltaX*deltaX+deltaY*deltaY - radius*radius;
	if(deltaCenter >= EPSINON) {
		return false;
	} else {
		return true;
	}
}

Area::Area(int wide, int height) {
	wideX = wide;
	heightY = height;
	entry = new Coordinate(wideX/2, 0);
	exit = new Coordinate(wideX/2, heightY);
}

bool DetectorChain::CheckChain(Detector& detector) {
	bool overlap = false;
	DETECTORLIST::iterator iter;
		
  for (iter = chain.begin(); iter != chain.end(); iter++) {
  	if((*iter).isOverlap(detector)) {
  		overlap = true;
  		break;
  	}
  }
  return overlap;
}

int DetectorChain::AddToChain(Detector& detector) {
	chain.push_back (detector);
	
	double newTopX = detector.getCenter().getX();
	double newTopY = detector.getCenter().getY() + detector.getR();
	double newBottomX = detector.getCenter().getX();
	double newBottomY = detector.getCenter().getY() - detector.getR();
	double newLeft = detector.getCenter().getX() - detector.getR();
	double newRight = detector.getCenter().getX() + detector.getR();
	
	bool updateInfo = false;
	if(newRight > right) {
		right = newRight;
		updateInfo = true;
	} else if (newLeft < left) {
		left = newLeft;
		updateInfo = true;
	}
	
	if(newTopY > topY) {
		topY = newTopY;
		topX = newTopX;
		updateInfo = true;
	} else if (newBottomY < bottomY) {
		bottomY = newBottomY;
		bottomX = newBottomX;
		updateInfo = true;
	}
	
	if(detector.isCoordinateInside(inArea.getEntry())) {
		setReachTopOnLeft();
		setReachTopOnRight();
	}
	
	if(detector.isCoordinateInside(inArea.getExit())) {
		setReachBottomOnLeft();
		setReachBottomOnRight();
	}

	if(updateInfo) {
		// do update the position info
		// check left side
		if(left <= 0) {
			setReachLeft();
		}
		
		// check right side
		if(right >= inArea.getWide()) {
			setReachRight();
		}

		// check top side
		if(topY >= inArea.getHeight()) {
		  if(topX < inArea.getEntry().getX()) {
			  setReachTopOnLeft();
		  } else if(topX > inArea.getEntry().getX()) {
			  setReachTopOnRight();
		  }
		}

		// check bottom side
		if(bottomY <= 0) {
		  if(bottomX < inArea.getExit().getX()) {
			  setReachBottomOnLeft();
		  } else if(bottomX > inArea.getExit().getX()) {
			  setReachBottomOnRight();
		  }
		}
	}
}

bool DetectorChain::findDetectorFromChain(Detector& detector) {
	bool found = false;
	DETECTORLIST::iterator iter;
		
  for (iter = this->chain.begin(); iter != this->chain.end(); iter++) {
  	if((*iter) == detector) {
  		found = true;
  		break;
  	}
  }
  return found;
}

void DetectorChain::ClearChain() {
	this->chain.clear();
}

void DetectorChain::mergeChain(DetectorChain& group) {
	DETECTORLIST::iterator iter;
		
  for (iter = group.getChain().begin(); iter != group.getChain().end(); iter++) {
  	if(!findDetectorFromChain(*iter)) {
  		AddToChain(*iter);
  	}
  }
  group.ClearChain();
}


DetectorManager::DetectorManager(int w, int h, int n, double x[], double y[], double r[]) {
	mArea = new Area(w, h);
	
	if(n > 0) {
		int i;
		for(i=0;i<n;i++) {
			Detector* detector = new Detector(x[i], y[i], r[i]);
			mDetectors.push_back(*detector);
		}
	}
};

DetectorManager::~DetectorManager() {
	DETECTORCHAINLIST::iterator iterChain;
	DETECTORLIST::iterator iter;

  for (iter = mDetectors.begin(); iter != mDetectors.end();) {
	  DETECTORLIST::iterator iterT = iter++;
	  Detector detector = *iterT;
	  //delete &detector;
  }
  //mDetectors.clear();
		
  for (iterChain = mDetectorChains.begin(); iterChain != mDetectorChains.end();) {
	  DETECTORCHAINLIST::iterator iterChainT = iterChain++;
	  DetectorChain chain = *iterChainT;
	  //delete &chain;
  }
  //mDetectorChains.clear();
  
	delete mArea;
}

bool DetectorManager::canEscape() {
	DETECTORLIST::iterator iter;
		
  for (iter = mDetectors.begin(); iter != mDetectors.end(); iter++) {
  	if(mDetectorChains.size() > 0) {
  		findAndLinkChains(*iter);
  	} else {
  		DetectorChain* chain = new DetectorChain(*mArea);
  		chain->AddToChain(*iter);
			mDetectorChains.push_back(*chain);
  	}
  }
  
  bool isEscapable = true;
	DETECTORCHAINLIST::iterator iterChain;
	
  for (iterChain = mDetectorChains.begin(); iterChain != mDetectorChains.end(); iterChain++) {
  	char ChainPosInfo = (*iterChain).getGroupPosInfoByte();
  	if(noEscapeDetected(ChainPosInfo)) {
  		isEscapable = false;
  		break;
  	}
  }
  return isEscapable;
}

bool DetectorManager::noEscapeDetected(char posInfo) {
	if((posInfo & NO_ESCAPE_1) == NO_ESCAPE_1 ||
		 (posInfo & NO_ESCAPE_2) == NO_ESCAPE_2 ||
		 (posInfo & NO_ESCAPE_3) == NO_ESCAPE_3 ||
		 (posInfo & NO_ESCAPE_4) == NO_ESCAPE_4 ||
		 (posInfo & NO_ESCAPE_5) == NO_ESCAPE_5 ||
		 (posInfo & NO_ESCAPE_6) == NO_ESCAPE_6 ||
		 (posInfo & NO_ESCAPE_7) == NO_ESCAPE_7 ||
		 (posInfo & NO_ESCAPE_8) == NO_ESCAPE_8 ||
		 (posInfo & NO_ESCAPE_9) == NO_ESCAPE_9) {
		 	return true;
	}
	
	return false;
}

void DetectorManager::findAndLinkChains(Detector& detector) {
	// find out the chains that are linked by the specific detector
	DETECTORCHAINLIST ChainsForMerge;
	int chainCount = mDetectorChains.size();
	int i;
		
  for (i = 0; i< chainCount; i++) {
  	DetectorChain& chain = mDetectorChains.front();
  	if(chain.CheckChain(detector)) {
  		mDetectorChains.pop_front();
  		ChainsForMerge.push_back(chain);
  	} else {
  		mDetectorChains.push_back(chain);
  	}
  }
  
	DetectorChain& chain = ChainsForMerge.front();
  ChainsForMerge.pop_front();
  // Merge the chains in ChainsForMerge since they are overlaped 
  if(ChainsForMerge.size() > 0) {
	  DETECTORCHAINLIST::iterator iter;
		
    for (iter = ChainsForMerge.begin(); iter != ChainsForMerge.end();) {
    	chain.mergeChain(*iter);
	    DETECTORCHAINLIST::iterator iterT = iter++;
	    ChainsForMerge.erase(iterT);
    }
    chain.AddToChain(detector);
  }
  mDetectorChains.push_back(chain);
}


bool escape(int w, int h, int n, double x[], double y[], double r[]) {
	DetectorManager* detectors = new DetectorManager(w, h, n, x, y, r);
	
	return detectors->canEscape();
}

int main() {
  double detectorX[] = {1.1, 4.3, 5.1, 65, 42.1};
  double detectorY[] = {50.2, 37.2, 40.1, 2.2, 93.2};
  double detectorR[] = {10.0, 20.4, 4.5, 10.9, 20.0};
  bool canEscape = escape(100, 100, 5, detectorX, detectorY, detectorR);
  printf( "Check escapable result: %d\n", canEscape);
}
